schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""mutation root"""
type mutation_root {
  """
  delete single row from the table: "todos"
  """
  todoDelete(id: Int!): todo

  """
  insert a single row into the table: "todos"
  """
  todoInsert(
    """the row to be inserted"""
    object: todo_insert_input!

    """on conflict condition"""
    on_conflict: todo_on_conflict
  ): todo

  """
  update single row of the table: "todos"
  """
  todoUpdate(
    """increments the numeric columns with given value of the filtered values"""
    _inc: todo_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: todo_set_input
    pk_columns: todo_pk_columns_input!
  ): todo

  """
  delete data from the table: "todos"
  """
  todosDelete(
    """filter the rows which have to be deleted"""
    where: todo_bool_exp!
  ): todo_mutation_response

  """
  insert data into the table: "todos"
  """
  todosInsert(
    """the rows to be inserted"""
    objects: [todo_insert_input!]!

    """on conflict condition"""
    on_conflict: todo_on_conflict
  ): todo_mutation_response

  """
  update data of the table: "todos"
  """
  todosUpdate(
    """increments the numeric columns with given value of the filtered values"""
    _inc: todo_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: todo_set_input

    """filter the rows which have to be updated"""
    where: todo_bool_exp!
  ): todo_mutation_response

  """
  update single row of the table: "users"
  """
  userUpdate(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user

  """
  update data of the table: "users"
  """
  usersUpdate(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response
}

"""
columns and relationships of "online_users"
"""
type onlineUser {
  id: String
  lastSeen: timestamptz

  """An object relationship"""
  user: user
}

"""
Boolean expression to filter rows from the table "online_users". All fields are combined with a logical 'AND'.
"""
input onlineUser_bool_exp {
  _and: [onlineUser_bool_exp!]
  _not: onlineUser_bool_exp
  _or: [onlineUser_bool_exp!]
  id: String_comparison_exp
  lastSeen: timestamptz_comparison_exp
  user: user_bool_exp
}

"""Ordering options when selecting data from "online_users"."""
input onlineUser_order_by {
  id: order_by
  lastSeen: order_by
  user: user_order_by
}

"""
select columns of table "online_users"
"""
enum onlineUser_select_column {
  """column name"""
  id

  """column name"""
  lastSeen
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "online_users"
  """
  onlineUsers(
    """distinct select on columns"""
    distinct_on: [onlineUser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [onlineUser_order_by!]

    """filter the rows returned"""
    where: onlineUser_bool_exp
  ): [onlineUser!]!

  """fetch data from the table: "todos" using primary key columns"""
  todo(id: Int!): todo

  """
  fetch data from the table: "todos"
  """
  todos(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): [todo!]!

  """fetch data from the table: "users" using primary key columns"""
  user(id: String!): user

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

type subscription_root {
  """
  fetch data from the table: "online_users"
  """
  onlineUsers(
    """distinct select on columns"""
    distinct_on: [onlineUser_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [onlineUser_order_by!]

    """filter the rows returned"""
    where: onlineUser_bool_exp
  ): [onlineUser!]!

  """fetch data from the table: "todos" using primary key columns"""
  todo(id: Int!): todo

  """
  fetch data from the table: "todos"
  """
  todos(
    """distinct select on columns"""
    distinct_on: [todo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [todo_order_by!]

    """filter the rows returned"""
    where: todo_bool_exp
  ): [todo!]!

  """fetch data from the table: "users" using primary key columns"""
  user(id: String!): user

  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinct_on: [user_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): [user!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "todos"
"""
type todo {
  createdAt: timestamptz!
  id: Int!
  isCompleted: Boolean!
  isPublic: Boolean!
  title: String!

  """An object relationship"""
  user: user!
  userId: String!
}

"""
Boolean expression to filter rows from the table "todos". All fields are combined with a logical 'AND'.
"""
input todo_bool_exp {
  _and: [todo_bool_exp!]
  _not: todo_bool_exp
  _or: [todo_bool_exp!]
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  isCompleted: Boolean_comparison_exp
  isPublic: Boolean_comparison_exp
  title: String_comparison_exp
  user: user_bool_exp
  userId: String_comparison_exp
}

"""
unique or primary key constraints on table "todos"
"""
enum todo_constraint {
  """unique or primary key constraint"""
  todos_pkey
}

"""
input type for incrementing numeric columns in table "todos"
"""
input todo_inc_input {
  id: Int
}

"""
input type for inserting data into table "todos"
"""
input todo_insert_input {
  isPublic: Boolean
  title: String
}

"""
response of any mutation on the table "todos"
"""
type todo_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [todo!]!
}

"""
on conflict condition type for table "todos"
"""
input todo_on_conflict {
  constraint: todo_constraint!
  update_columns: [todo_update_column!]! = []
  where: todo_bool_exp
}

"""Ordering options when selecting data from "todos"."""
input todo_order_by {
  createdAt: order_by
  id: order_by
  isCompleted: order_by
  isPublic: order_by
  title: order_by
  user: user_order_by
  userId: order_by
}

"""primary key columns input for table: todo"""
input todo_pk_columns_input {
  id: Int!
}

"""
select columns of table "todos"
"""
enum todo_select_column {
  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  isCompleted

  """column name"""
  isPublic

  """column name"""
  title

  """column name"""
  userId
}

"""
input type for updating data in table "todos"
"""
input todo_set_input {
  id: Int
  isCompleted: Boolean
}

"""
update columns of table "todos"
"""
enum todo_update_column {
  """column name"""
  id

  """column name"""
  isCompleted
}

"""
columns and relationships of "users"
"""
type user {
  id: String!
  name: String!
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  id: String_comparison_exp
  name: String_comparison_exp
}

"""
response of any mutation on the table "users"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""Ordering options when selecting data from "users"."""
input user_order_by {
  id: order_by
  name: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  id: String!
}

"""
select columns of table "users"
"""
enum user_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "users"
"""
input user_set_input {
  lastSeen: timestamptz
}
